{"version":3,"sources":["Components/Home.jsx","Components/BoardGame.jsx","Components/EndGame.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","props","useState","gamerName","setGamerName","id","type","placeholder","onChange","e","target","value","className","to","onClick","alert","preventDefault","passGamerCards","passComputerCards","BoardGame","gamerCard","setGamerCard","computerCard","setComputerCard","link","setLink","computer","victorys","gamer","gamerCards","pop","computerCards","losses","length","EndGame","App","packOfCards","fullname","numberOfGames","setGamer","setComputer","i","j","Math","floor","random","shuffle","push","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a620e1d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Home(props) {\r\n  let [gamerName, setGamerName] = useState(\"\");\r\n\r\n  return (\r\n    <div id=\"home\">\r\n      <h1 id=\"headline\">Ready for War?!</h1>\r\n      <h2>How to play</h2>\r\n      <p>\r\n        The deck is divided evenly, with each player receiving 26 cards, dealt\r\n        one at a time. <br /> The player with the higher card gets point,if the\r\n        cards are equal none of the players gets point. <br /> The player with\r\n        the heigher score win the game!{\" \"}\r\n      </p>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter your name\"\r\n        onChange={(e) => {\r\n          setGamerName(e.target.value);\r\n        }}\r\n      />\r\n      <Link\r\n        className=\"links\"\r\n        to=\"/game\"\r\n        onClick={(e) => {\r\n          if (gamerName === \"\") {\r\n            alert(\"Please enter your name\");\r\n            e.preventDefault();\r\n          } else {\r\n            props.passGamerCards();\r\n            props.passComputerCards();\r\n          }\r\n        }}\r\n      >\r\n        Start\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function BoardGame(props) {\r\n  let [gamerCard, setGamerCard] = useState(0);\r\n  let [computerCard, setComputerCard] = useState(0);\r\n  let [link, setLink] = useState(\"/game\");\r\n\r\n  return (\r\n    <div id=\"game\">\r\n      <div id=\"board\">\r\n        {\" \"}\r\n        <h1>Computer</h1>\r\n        <h2>Computer score: {props.computer.victorys}</h2>\r\n        <div className=\"card\">\r\n          <div>{computerCard}</div>\r\n        </div>\r\n        <div className=\"card\">\r\n          <div>{gamerCard}</div>\r\n        </div>\r\n        <h2>Your score: {props.gamer.victorys}</h2>\r\n        <h1>You</h1>{\" \"}\r\n        <Link\r\n          id=\"next\"\r\n          className=\"links\"\r\n          to={link}\r\n          onClick={() => {\r\n            setGamerCard(props.gamer.gamerCards.pop());\r\n            setComputerCard(props.computer.computerCards.pop());\r\n            if (gamerCard > computerCard) {\r\n              props.gamer.victorys++;\r\n              props.computer.losses++;\r\n            } else if (computerCard > gamerCard) {\r\n              props.computer.victorys++;\r\n              props.gamer.losses++;\r\n            }\r\n            if (props.gamer.gamerCards.length === 0) {\r\n              setLink(\"/end-game\");\r\n            }\r\n          }}\r\n        >\r\n          Next\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function EndGame(props) {\r\n  const showResult = () => {\r\n    let result;\r\n    if (props.gamer.victorys > props.computer.victorys) {\r\n      result = \"You Win!\";\r\n    } else {\r\n      result = \"You Lose!\";\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div id=\"end-game\">\r\n      <h1 id=\"result\">{showResult()}</h1>\r\n      <div id=\"result-numbers\">\r\n        <div className=\"score\">You: {props.gamer.victorys}</div>\r\n        <div className=\"score\"> Computer: {props.gamer.losses}</div>\r\n      </div>\r\n      <Link className=\"links\" to=\"/\">\r\n        again?\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./Components/Home\";\nimport BoardGame from \"./Components/BoardGame\";\nimport EndGame from \"./Components/EndGame\";\n\nfunction App() {\n  const packOfCards = [\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    6,\n    6,\n    6,\n    6,\n    7,\n    7,\n    7,\n    7,\n    8,\n    8,\n    8,\n    8,\n    9,\n    9,\n    9,\n    9,\n    10,\n    10,\n    10,\n    10,\n    11,\n    11,\n    11,\n    11,\n    12,\n    12,\n    12,\n    12,\n    13,\n    13,\n    13,\n    13,\n  ];\n  const [gamer, setGamer] = useState({\n    fullname: \"\",\n    victorys: 0,\n    losses: 0,\n    numberOfGames: 0,\n    gamerCards: [],\n  });\n\n  const [computer, setComputer] = useState({\n    victorys: 0,\n    losses: 0,\n    numberOfGames: 0,\n    computerCards: [],\n  });\n\n  const shuffle = (packOfCards) => {\n    for (let i = packOfCards.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [packOfCards[i], packOfCards[j]] = [packOfCards[j], packOfCards[i]];\n    }\n    return packOfCards;\n  };\n  shuffle(packOfCards);\n\n  const passGamerCards = () => {\n    let i = 0;\n    while (i < packOfCards.length / 2) {\n      gamer.gamerCards.push(packOfCards[i]);\n      i++;\n    }\n    setGamer({ ...gamer });\n  };\n\n  const passComputerCards = () => {\n    let i = packOfCards.length / 2;\n    while (i < packOfCards.length) {\n      computer.computerCards.push(packOfCards[i]);\n      i++;\n    }\n    setComputer({ ...computer });\n  };\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => {\n              return (\n                <Home\n                  passGamerCards={passGamerCards}\n                  passComputerCards={passComputerCards}\n                  packOfCards={packOfCards}\n                />\n              );\n            }}\n          ></Route>\n          <Route\n            exact\n            path=\"/game\"\n            component={() => {\n              return (\n                <BoardGame\n                  gamer={gamer}\n                  computer={computer}\n                  setGamer={setGamer}\n                  setComputer={setComputer}\n                />\n              );\n            }}\n          ></Route>\n          <Route\n            exact\n            path=\"/end-game\"\n            component={() => {\n              return <EndGame gamer={gamer} computer={computer} />;\n            }}\n          ></Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}